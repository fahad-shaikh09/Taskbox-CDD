{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Data/Bootcamp/Taskbox/components-app/src/components/DisplayTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // import { useDispatch} from \"react-redux\"\n///////////////////////////////////////////////////////////////////////////////////////////////\n// MATERIAL UI\n\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 400,\n    maxWidth: 600\n  }\n}); ///////////////////////////////////////////////////////////////////////////////////////////////\n\nconst DisplayTasks = props => {\n  _s();\n\n  const classes = useStyles();\n  console.log(\"Tasks in Display Tasks component:\", props.tasks);\n  const [updatedtasks, SetUpdatedTasks] = useState([]); // var dispatch = useDispatch();\n\n  useEffect(() => {\n    SetUpdatedTasks(props.tasks);\n  }, [props]);\n\n  const toggleStatus = i => {\n    console.log(\"Index\", i, \"is clicked\"); // dispatch({\n    //     type: \"TOGGLE\",\n    //     payload: {\n    //         index: i,\n    //     },\n    // })\n  }; // return (\n  //     <div>\n  //         <h1>Tasks</h1>\n  //         <table border=\"1px\" >\n  //             <thead >\n  //                 <tr>\n  //                     <th>Task</th>\n  //                     <th>Status (Completed or Not)</th>\n  //                     <th>Toggle Status</th>\n  //                 </tr>\n  //             </thead>\n  //             {tasks.map((task,index) => {\n  //                 return (\n  //                     <tbody>\n  //                         <tr key={task.title}>\n  //                             <td>{task.title}</td>\n  //                             <td> {\"\"+task.status === \"true\" ? \"Done\" : \"Not Completed\"}</td>\n  //                             <td> <button onClick={()=>toggleStatus(index)}> Click to toggle</button></td>\n  //                         </tr>\n  //                     </tbody>\n  //                 )\n  //             })}\n  //         </table>\n  //     </div>\n  // )\n\n\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      className: classes.table,\n      \"aria-label\": \"customized table\",\n      style: {\n        width: 1000,\n        margin: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n            align: \"middle\",\n            children: \"Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            align: \"middle\",\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            align: \"middle\",\n            children: \"Toggle Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: updatedtasks.map((task, index) => /*#__PURE__*/_jsxDEV(StyledTableRow, {\n          children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n            align: \"middle\",\n            component: \"th\",\n            scope: \"row\",\n            children: [\" \", task.input, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            align: \"middle\",\n            children: \"\" + task.status === \"true\" ? \"Done\" : \"Not Completed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n            align: \"middle\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleStatus(index),\n              children: \" Click to toggle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 51\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DisplayTasks, \"h4u05+0c4HO1a0+AUkD8pwgsvpk=\", false, function () {\n  return [useStyles];\n});\n\n_c = DisplayTasks;\nDisplayTasks.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"DisplayTasks\"\n};\nexport default DisplayTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayTasks\");\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/DisplayTasks.js\"] = {\n    name: \"DisplayTasks\",\n    docgenInfo: DisplayTasks.__docgenInfo,\n    path: \"src/components/DisplayTasks.js\"\n  };\n}","map":{"version":3,"sources":["/Data/Bootcamp/Taskbox/components-app/src/components/DisplayTasks.js"],"names":["React","useState","useEffect","withStyles","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","root","action","hover","useStyles","table","minWidth","maxWidth","DisplayTasks","props","classes","console","log","tasks","updatedtasks","SetUpdatedTasks","toggleStatus","i","width","margin","map","task","index","input","status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n// import { useDispatch} from \"react-redux\"\n\n///////////////////////////////////////////////////////////////////////////////////////////////\n// MATERIAL UI\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nconst useStyles = makeStyles({\n    table: {\n      minWidth: 400,\n        maxWidth: 600\n\n    },\n  });\n\n  ///////////////////////////////////////////////////////////////////////////////////////////////\nconst DisplayTasks = (props) => {\n    const classes = useStyles();\n\n    console.log(\"Tasks in Display Tasks component:\", props.tasks);\n    \n    const[updatedtasks,SetUpdatedTasks]= useState([])\n    \n    // var dispatch = useDispatch();\n    \n    useEffect((\n      ()=>{\n        SetUpdatedTasks(props.tasks)\n      }\n    ),[props])\n\n    const toggleStatus = (i) => {\n        console.log(\"Index\", i , \"is clicked\")\n            // dispatch({\n            //     type: \"TOGGLE\",\n            //     payload: {\n            //         index: i,\n            //     },\n            // })\n    }\n\n\n    // return (\n    //     <div>\n    //         <h1>Tasks</h1>\n    //         <table border=\"1px\" >\n    //             <thead >\n    //                 <tr>\n    //                     <th>Task</th>\n    //                     <th>Status (Completed or Not)</th>\n    //                     <th>Toggle Status</th>\n    //                 </tr>\n    //             </thead>\n\n    //             {tasks.map((task,index) => {\n\n    //                 return (\n    //                     <tbody>\n    //                         <tr key={task.title}>\n    //                             <td>{task.title}</td>\n    //                             <td> {\"\"+task.status === \"true\" ? \"Done\" : \"Not Completed\"}</td>\n    //                             <td> <button onClick={()=>toggleStatus(index)}> Click to toggle</button></td>\n    //                         </tr>\n    //                     </tbody>\n    //                 )\n\n    //             })}\n    //         </table>\n\n    //     </div>\n    // )\n    return (\n        <TableContainer component={Paper} >\n          <Table className={classes.table} aria-label=\"customized table\" style={{ width: 1000, margin: 'auto' }}>\n            <TableHead>\n              <TableRow>\n                <StyledTableCell align=\"middle\">Task</StyledTableCell>\n                <StyledTableCell align=\"middle\">Status</StyledTableCell>\n                <StyledTableCell align=\"middle\">Toggle Status</StyledTableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {updatedtasks.map((task,index) => (\n                <StyledTableRow key={index}>\n                  <StyledTableCell align=\"middle\"component=\"th\" scope=\"row\"> {task.input} </StyledTableCell>\n                  <StyledTableCell align=\"middle\">{\"\"+task.status === \"true\" ? \"Done\" : \"Not Completed\"}</StyledTableCell>\n                  <StyledTableCell align=\"middle\"><button onClick={()=>toggleStatus(index)}> Click to toggle</button></StyledTableCell>\n                </StyledTableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      );\n}\n\nexport default DisplayTasks\n"]},"metadata":{},"sourceType":"module"}